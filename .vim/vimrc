let mapleader=','
filetype plugin indent on
runtime ftplugin/man.vim
syntax enable

set regexpengine=2
set background=dark
set backspace=indent,eol,start
set colorcolumn=120
set encoding=utf-8
set keywordprg=:Man
set laststatus=2
set number
set splitright
set nocompatible noswapfile
set wildmenu incsearch hlsearch showmatch smartcase
set expandtab shiftwidth=4 smarttab softtabstop=4 tabstop=4 smartindent

if has('persistent_undo')
  set undodir=$HOME/.vim/undo
  set undolevels=10000
  set undofile
endif

colorscheme retrobox

nmap n nzz
nmap N Nzz
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-h> <C-w>h
nmap <C-l> <C-w>l
nmap <C-n> :Lexplore<cr>
nmap <C-p> :FZF --bind ctrl-p:abort<cr>
nmap <C-b> :Buffers<cr>
nmap <C-t> :Tags <cr>
nmap <leader>rw :%s/\s\+$//e<CR>
nmap <leader>jq :%!jq '.'<CR>
nmap <leader>ss :mksession! ~/.vim/sessions/default <cr>
nmap <leader>ls :source ~/.vim/sessions/default <cr>
nmap <silent><Leader>g :GitBlame<CR>
nmap <Leader>/ :Ack!<Space>

let g:airline_theme='hybridline'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#tab_nr_type = 1
let g:fzf_tags_command = 'ctags -R --exclude=.git --exclude=node_modules --exclude=docs --exclude=.venv --exclude=.terraform'
let g:go_def_mapping_enabled=0
let g:fzf_layout = { 'down':  '40%'}
let g:ackprg = 'rg --vimgrep --type-not sql --smart-case'
let g:ack_autoclose = 1
let g:ack_use_cword_for_empty_search = 1
let g:ale_fix_on_save = 1

let g:ale_fixers = { '*': ['remove_trailing_lines', 'trim_whitespace'] }
let g:ale_linters = {
\ 'javascript': ['eslint'],
\ 'sh': ['shellcheck'],
\ 'go': ['golangci-lint'],
\ 'rust': ['rustfmt'],
\ 'python': ['pylint']
\}

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <C-x><C-z> coc#pum#visible() ? coc#pum#stop() : "\<C-x>\<C-z>"
" remap for complete to use tab and <cr>
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()

highlight CocSearch ctermfg=12 guifg=#18A3FF
highlight CocMenuSel ctermbg=109 guibg=#13354A

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

cnoreabbrev Ack Ack!

" NetRW Settings
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 0
let g:netrw_altv = 1
let g:netrw_winsize = 25
let g:netrw_winsize = -28

highlight BadWhitespace ctermbg=red guibg=red
augroup filetypesettings
  autocmd FileType c          set ai ts=4 sw=4 si sta et
  autocmd FileType cpp        set ai ts=4 sw=4 si sta et
  autocmd FileType python     set ai ts=4 sw=4 si sta et
  autocmd FileType bash       set ai ts=4 sw=4 si sta et
  autocmd FileType html       set ai ts=2 sw=2 si sta et
  autocmd FileType javascript set ai ts=2 sw=2 si sta et
  autocmd FileType typescript set ai ts=2 sw=2 si sta et
  autocmd FileType markdown   set ai ts=2 sw=2 si sta et spell spelllang=en_us
  autocmd FileType rst        set ai ts=4 sw=4 si sta et spell spelllang=en_us
  autocmd FileType ruby       set ai ts=2 sw=2 si sta et
  autocmd FileType yaml       set ai ts=2 sw=2 si sta et
  autocmd FileType make       set ai ts=8 sw=8 si sta noet list
  autocmd FileType go         packadd vim-go | set ai ts=8 sw=8 si sta noet list
  autocmd FileType rust       packadd rust.vim | set ai ts=4 sw=4 si sta et
  autocmd FileType terraform  packadd vim-terraform | set ai ts=2 sw=2 si sta et
  autocmd BufRead,BufNewFile Earthfile set filetype=Earthfile
  autocmd BufRead,BufNewFile build.earth set filetype=Earthfile
augroup END
