#!/usr/bin/env bash

# kubectl-shell - Kubernetes wrapper for exec-ing into a pod
#
# Usage:
#   kubectl-shell <pod-name> [-c container] [-s shell]
#
# Arguments:
#   pod-name  (required) Name of the pod.
# Options:
#   -c        (optional) Container to exec into within the pod.
#   -s        (optional) Shell to use (sh/bash/zsh). Default: bash.

set -euo pipefail

# display usage information
function usage() {
    echo "Usage: kubectl shell <pod-name> [-c container] [-s shell]"
    echo "  pod-name: (required) Name of the pod"
    echo "  Optional Arguments:"
    echo "      -c: (optional) Container to exec into within the pod"
    echo "      -s: (optional) Shell to use (sh/bash/zsh). Default: bash"
    exit 1
}

source "$HOME/.config/utils/common.sh"

# Initialize variables
pod_name=""
container=""
shell="bash"

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -s)
            if [[ -z ${2:-} ]]; then
                log_error "Missing argument for -s (shell)"
                usage
            fi
            shell="$2"
            shift 2
            ;;
        -c)
            if [[ -z ${2:-} ]]; then
                log_error "Missing argument for -c (container)"
                usage
            fi
            container="$2"
            shift 2
            ;;
        -*)
            log_error "Unknown option: $1"
            usage
            ;;
        *)
            if [[ -z "$pod_name" ]]; then
                pod_name="$1"
            else
                log_error "Too many arguments"
                usage
            fi
            shift
            ;;
    esac
done

# Check if the pod name is provided
if [[ -z "$pod_name" ]]; then
    log_error "Pod name is required"
    usage
fi

# Fetch the namespace of the pod
namespace=$(kubectl get pods --all-namespaces --field-selector metadata.name="$pod_name" -o jsonpath='{.items[0].metadata.namespace}' 2>/dev/null || true)

if [[ -z "$namespace" ]]; then
    log_error "Error: Unable to find namespace for pod $pod_name Ensure the pod exists."
    exit 1
fi

# Build kubectl exec command
exec_command=("kubectl" "exec" "-it" "$pod_name" "-n" "$namespace")
if [[ -n "$container" ]]; then
    exec_command+=("-c" "$container")
fi
exec_command+=("--" "$shell")

# Execute the command
log_info "Opening a $shell shell in $pod_name"
"${exec_command[@]}"
