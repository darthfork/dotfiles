#!/usr/bin/env bash

# kubectl-dorker - Kubernetes plugin for creating a pod with debugging tools
#
# Usage:
#   kubectl dorker {up|down}

CONFIG_YAML="$HOME/.config/utils/kubernetes.yaml"

# Source common utilities
source "$HOME/.config/utils/common.sh"

# display usage information
function usage() {
    echo "Usage: kubectl dorker {up|down}"
    exit 1
}

# bring up the dorker pod
function up() {
    log_info "Applying dorker configuration"
    if ! envsubst < "$CONFIG_YAML" | kubectl apply -f -; then
        log_error "Failed to apply the Kubernetes configuration"
        exit 1
    fi

    # Wait for the pod to be ready
    log_info "Waiting for the dorker pod to be ready..."
    if ! kubectl wait --for=condition=ready pod/dorker --timeout=120s; then
        log_error "Timeout while waiting for the dorker pod to be ready"
        down
        exit 1
    fi

    # Open a shell inside the 'dorker' container
    log_info "Opening shell in the dorker container..."
    if ! kubectl exec -it dorker --container dorker -- /bin/bash; then
        log_error "Failed to open a shell in the dorker container"
        down
        exit 1
    fi
}

# bring down the dorker pod and resources
function down() {
    log_info "Deleting all resources deployed by dorker"
    if ! kubectl delete -f "$CONFIG_YAML" ; then
        log_error "Failed to delete the Kubernetes resources"
        exit 1
    fi
    log_info "Resources deleted successfully"
}

# Ensure the YAML file exists
if [ ! -f "$CONFIG_YAML" ]; then
    log_error "Kubernetes configuration file $CONFIG_YAML does not exist"
    exit 1
fi

# Check the user input and call the appropriate function
if [ $# -ne 1 ]; then
    usage
fi

case "$1" in
    up)
        up
        ;;
    down)
        down
        ;;
    *)
        usage
        ;;
esac
